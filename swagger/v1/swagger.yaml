---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  schemas:
    errors_object:
      type: object
      properties:
        message:
          type: string
          example: Name can't be blank
    person:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: James Franco
        email:
          type: string
          example: acme@some.mail
        cpf:
          type: string
          example: 419.356.777-05
        address:
          type: string
          example: Mulholland Drive
        birthday:
          type: string
          pattern: "(?-mix:([0-9]{4})-(?:[0-9]{2})-([0-9]{2}))"
          example: '2019-05-17'
        active:
          type: boolean
    person_form:
      type: object
      properties:
        name:
          type: string
          example: James Franco
        email:
          type: string
          example: acme@some.mail
        cpf:
          type: string
          example: 419.356.777-05
        address:
          type: string
          example: Mulholland Drive
        birthday:
          type: string
          pattern: "(?-mix:([0-9]{4})-(?:[0-9]{2})-([0-9]{2}))"
          example: '2019-05-17'
        active:
          type: boolean
      required:
      - name
      - cpf
      - active
paths:
  "/people":
    get:
      summary: List all people
      tags:
      - People
      parameters:
      - name: page
        in: query
        required: false
        description: The desired page
        schema:
          type: integer
      responses:
        '200':
          description: Returns all people
          content:
            application/json:
              example:
              - id: 1
                name: James
                email: some@nice.mail
                address: Mulholland Drive
                cpf: 419.356.777-05
                birthday: '2019-05-17'
                active: true
    post:
      summary: Creates a person
      tags:
      - People
      parameters: []
      responses:
        '201':
          description: Person Created
          content:
            application/json:
              example:
                id: 1
                name: James
                email: some@nice.mail
                address: Mulholland Drive
                cpf: 419.356.777-05
                birthday: '2019-05-17'
                active: true
        '422':
          description: Invalid Request
          content:
            application/json:
              example:
                message: 'Validation failed: Name can''t be blank'
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/person_form"
  "/people/{id}":
    get:
      summary: Retrieves a person
      tags:
      - Person
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: person found
          content:
            application/json:
              example:
                id: 1
                name: James
                email: some@nice.mail
                address: Mulholland Drive
                cpf: 419.356.777-05
                birthday: '2019-05-17'
                active: true
        '404':
          description: Not Found
          content:
            application/json:
              example:
                message: Couldn't find Person with 'id'=0
    patch:
      summary: Updates a person
      tags:
      - Person
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: person updated
          content:
            application/json:
              example:
                id: 1
                name: James
                email: some@nice.mail
                address: Mulholland Drive
                cpf: 419.356.777-05
                birthday: '2019-05-17'
                active: true
        '422':
          description: Record Invalid
          content:
            application/json:
              example:
                message: 'Validation failed: Name can''t be blank'
        '404':
          description: Not Found
          content:
            application/json:
              example:
                message: Couldn't find Person with 'id'=0
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/person_form"
    delete:
      summary: Deletes a person
      tags:
      - Person
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Person deleted
        '404':
          description: Not Found
          content:
            application/json:
              example:
                message: Couldn't find Person with 'id'=0
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
